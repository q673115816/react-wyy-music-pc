{"version":3,"file":"js/qrcode.js?version=07a0046a","mappings":"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","sources":["webpack://@wyy/web/../../node_modules/.pnpm/qrcode.react@3.0.1/node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw \"Version value out of range\";\n      if (msk < -1 || msk > 7)\n        throw \"Mask value out of range\";\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw \"Invalid value\";\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw \"Data too long\";\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw \"Invalid argument\";\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw \"Invalid argument\";\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw \"Mask value out of range\";\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw \"Unreachable\";\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw \"Version number out of range\";\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw \"Degree out of range\";\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw \"Byte out of range\";\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw \"Value out of range\";\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw \"Assertion error\";\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw \"Invalid argument\";\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw \"String contains non-numeric characters\";\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw \"String contains unencodable characters in alphanumeric mode\";\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw \"ECI assignment value out of range\";\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw \"ECI assignment value out of range\";\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_PROPS = {\n  size: 128,\n  level: \"L\",\n  bgColor: \"#FFFFFF\",\n  fgColor: \"#000000\",\n  includeMargin: false\n};\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(props, cells) {\n  const { imageSettings, size, includeMargin } = props;\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  function update() {\n    const { value: value2, size: size2, level: level2, bgColor: bgColor2, fgColor: fgColor2, includeMargin: includeMargin2 } = props;\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value2, ERROR_LEVEL_MAP[level2]).getModules();\n      const margin = includeMargin2 ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(props, cells);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size2 * pixelRatio;\n      const scale = size2 / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor2;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor2;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  }\n  useEffect(() => {\n    update();\n  });\n  const _a = props, {\n    value,\n    size,\n    level,\n    bgColor,\n    fgColor,\n    style,\n    includeMargin,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"style\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  let imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        update();\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nQRCodeCanvas.defaultProps = DEFAULT_PROPS;\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size,\n    level,\n    bgColor,\n    fgColor,\n    includeMargin,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(props, cells);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    shapeRendering: \"crispEdges\",\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath\n  }), image);\n}\nQRCodeSVG.defaultProps = DEFAULT_PROPS;\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  const Component = renderAs === \"svg\" ? QRCodeSVG : QRCodeCanvas;\n  return /* @__PURE__ */ React.createElement(Component, __spreadValues({}, otherProps));\n};\nQRCode.defaultProps = __spreadValues({ renderAs: \"canvas\" }, DEFAULT_PROPS);\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n"],"names":["qrcodegen","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","qrcodegen2","_QrCode","constructor","version","errorCorrectionLevel","dataCodewords","msk","this","modules","isFunction","MIN_VERSION","MAX_VERSION","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","static","text","ecl","segs","QrSegment","makeSegments","encodeSegments","data","seg","makeBytes","minVersion","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","length","dataCapacityBits","Math","min","padByte","forEach","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","invert","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","QrCode","val","len","cond","_QrSegment","bitData","Mode","BYTE","digits","isNumeric","parseInt","substr","NUMERIC","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","makeNumeric","makeAlphanumeric","toUtf8ByteArray","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_PROPS","level","bgColor","fgColor","includeMargin","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","getImageSettings","props","cells","imageSettings","numCells","defaultSize","scale","width","height","excavate","floorX","floorY","SUPPORTS_PATH2D","Path2D","addPath","e","QRCodeCanvas","_canvas","useRef","_image","update","value2","size2","level2","bgColor2","fgColor2","includeMargin2","current","canvas","ctx","getContext","encodeText","calculatedImageSettings","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","drawImage","useEffect","_a","style","otherProps","canvasStyle","img","imgSrc","src","display","onLoad","ref","QRCodeSVG","xlinkHref","preserveAspectRatio","fgPath","shapeRendering","viewBox","d","defaultProps","QRCode","renderAs","Component"],"sourceRoot":""}