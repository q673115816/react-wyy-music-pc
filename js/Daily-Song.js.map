{"version":3,"file":"js/Daily-Song.js?version=262389bf","mappings":"wUAgBMA,EAAsB,Y,QAAGC,WAAAA,OAAU,IAAG,KAAE,EAC5C,OACE,kBAACC,MAAG,CACFC,UAAU,OACVC,MAAO,CACL,qBAAsB,0CAGxB,kBAACF,MAAG,CAACC,UAAU,oDACb,kBAACD,MAAG,CAACC,UAAU,oBAAmB,QAC1B,kBAAPD,MAAG,CAACC,UAAU,QAAO,MAClB,kBAAHD,MAAG,CAACC,UAAU,QAAO,MAClB,kBAAHD,MAAG,CAACC,UAAU,QAAO,OAEvBF,EAAWI,KAAI,SAACC,EAAWC,G,OAC1B,kBAACC,EAAAA,EAAU,CACTC,OAAQ,CACN,CAAC,KAAU,KAAU,SACH,CAAjB,QAAmB,KAAU,OAAgB,OAAgB,OAElCC,KAAK,OACLC,KAAML,EACNM,IAAKN,EAAUO,KAAOP,EAAUQ,GAChCC,SAAS,IACTZ,UAAWa,GAAAA,CACT,gGACA,CAAE,aAAcT,EAAQ,GAAM,KAGhC,kBAACL,MAAG,CAACC,UAAU,mBACb,kBAACc,EAAAA,EAAI,CAACV,MAAOA,EAAOO,GAAIR,EAAUQ,MAEpC,kBAACZ,MAAG,CAACC,UAAU,IACb,kBAACe,EAAAA,EAAK,CAACJ,GAAIR,EAAUQ,MAEvB,kBAACZ,MAAG,CAACC,UAAU,IACb,kBAACgB,EAAAA,EAAQ,OAEX,kBAACC,EAAAA,EAAI,CAACT,KAAML,EAAWH,UAAU,SACjC,kBAACkB,EAAAA,EAAO,CAACC,QAAShB,EAAUiB,GAAIpB,UAAU,SAC1C,kBAACqB,EAAAA,EAAK,CACJrB,UAAU,OACVU,KAAMP,EAAUmB,GAAGZ,KACnBC,GAAIR,EAAUmB,GAAGX,KAEnB,kBAACZ,MAAG,CAACC,UAAU,+BACZuB,GAAAA,CAAMpB,EAAUqB,IAAIC,OAAO,gBAQxC,SAAeC,EAAAA,EAAAA,MAAK7B,GC7DlD,GAAe6B,EAAAA,EAAAA,OAAK,W,IAKCC,GAJnBC,EAAAA,EAAAA,KAEA,IACEC,GAAAA,EAAAA,EAAAA,KADMF,EACNE,EADMF,KAAaG,GACnBD,EADYE,MACZF,EADmBC,WAEfhC,GADJ+B,EAD8BG,WAC9BH,EAD0CI,UAC1CJ,EADqDK,QACrDL,EAD8DM,SAE7CR,MAAAA,GAAU,QAAVA,EAAAA,EAAMA,YAAI,IAAVA,OAAAA,EAAAA,EAAY7B,aAAc,IAC7C,OAAIgC,EAEA,kBAAC/B,MAAG,CAACC,UAAY,qBACf,kBAACoC,EAAAA,EAAO,OAKZ,kBAACrC,MAAG,CAACC,UAAU,6CACb,kBAACD,MAAG,CAACC,UAAU,6BACb,kBAACD,MAAG,CAACC,UAAU,6BACb,kBAACD,MAAG,CAACC,UAAU,gCACb,kBAACqC,EAAAA,GAAW,OAEd,kBAACtC,MAAG,CAACC,UAAU,gBACb,kBAACD,MAAG,CAACC,UAAU,MAAK,UACR,kBAAXD,MAAG,CAACC,UAAU,sBAAqB,0BAKxC,kBAACD,MAAG,CAACC,UAAU,qBACb,kBAACsC,EAAAA,EAAS,CAACC,SAAUzC,IAAc,MAEnC,kBAAC0C,SAAM,CACLjC,KAAK,SACLP,UAAU,0FAEV,kBAACyC,EAAAA,eAAc,CAACC,KAAM,GAAIC,OAAQ,IAAK,YAK7C,kBAAC9C,EAAO,CAACC,WAAYA,QCrC3B,EARe,WACb,OACE,kBAAC8C,EAAAA,OAAM,KACL,kBAACC,EAAAA,MAAK,CAACzC,OAAAA,EAAM0C,QAAS,kBAACC,EAAS","sources":["webpack://@wyy/web/./src/features/Daily-Song/Content.tsx","webpack://@wyy/web/./src/features/Daily-Song/DailySong.tsx","webpack://@wyy/web/./src/features/Daily-Song/Router.tsx"],"sourcesContent":["import React, { FC, memo } from \"react\";\nimport MenuCreate from \"@/components/MenuCreate/MenuCreate\";\nimport classNames from \"classnames\";\nimport Rank from \"@/components/Table/Rank\";\nimport Heart from \"@/components/Table/Heart\";\nimport Download from \"@/components/Table/Download\";\nimport Name from \"@/components/Table/Name\";\nimport Artists from \"@/components/Table/Artists\";\nimport Album from \"@/components/Table/Album\";\nimport dayjs from \"dayjs\";\nimport { DailySong } from \"@/modules/services/daily/types\";\n\ninterface iProps {\n  dailySongs: DailySong[];\n}\n\nconst Content: FC<iProps> = ({ dailySongs = [] }) => {\n  return (\n    <div\n      className=\"pb-8\"\n      style={{\n        \"--ui_grid_template\": \"36px / 54px 30px 30px 36% 4fr 6fr 2fr\",\n      }}\n    >\n      <div className=\"grid items-center text-gray-500 ui_grid_template\">\n        <div className=\"col-start-4 px-2\">音乐标题</div>\n        <div className=\"px-2\">歌手</div>\n        <div className=\"px-2\">专辑</div>\n        <div className=\"px-2\">时长</div>\n      </div>\n      {dailySongs.map((dailySong, index) => (\n        <MenuCreate\n          schema={[\n            [\"评论\", \"播放\", \"下一首播放\"],\n            [\"收藏到歌单\", \"分享\", \"复制链接\", \"不感兴趣\", \"下载\"],\n          ]}\n          type=\"song\"\n          item={dailySong}\n          key={dailySong.name + dailySong.id}\n          tabIndex=\"2\"\n          className={classNames(\n            \"grid h-9 items-center hover:bg-gray-100 focus:bg-gray-200 focus:outline-none ui_grid_template\",\n            { \"bg-gray-50\": index % 2 === 0 }\n          )}\n        >\n          <div className=\"pr-3 text-right\">\n            <Rank index={index} id={dailySong.id} />\n          </div>\n          <div className=\"\">\n            <Heart id={dailySong.id} />\n          </div>\n          <div className=\"\">\n            <Download />\n          </div>\n          <Name item={dailySong} className=\"px-2\" />\n          <Artists artists={dailySong.ar} className=\"px-2\" />\n          <Album\n            className=\"px-2\"\n            name={dailySong.al.name}\n            id={dailySong.al.id}\n          />\n          <div className=\"text-gray-400 truncate px-2\">\n            {dayjs(dailySong.dt).format(\"mm:ss\")}\n          </div>\n        </MenuCreate>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(Content);\n","import React, { memo } from \"react\";\nimport { IconFolderPlus } from \"@tabler/icons\";\nimport { SymbolToday } from \"@/components/Symbol\";\nimport useLoginStatus from \"@/hooks/useLoginStatus\";\nimport GroupPlay from \"@/components/GroupPlay\";\nimport { useGetRecommendSongsQuery } from \"@/modules/services/daily\";\nimport Loading from \"@/components/Loading\";\nimport Content from \"./Content\";\n\nexport default memo(function DailySong() {\n  useLoginStatus();\n\n  const { data, error, isLoading, isFetching, isSuccess, isError, refetch } =\n    useGetRecommendSongsQuery();\n  const dailySongs = data?.data?.dailySongs || [];\n  if (isLoading) {\n    return (\n      <div className={`flex-center pt-48`}>\n        <Loading />\n      </div>\n    );\n  }\n  return (\n    <div className=\"w-full overflow-auto max-h-full flex-auto\">\n      <div className=\"px-8 pb-2.5 pt-6 border-b\">\n        <div className=\"section flex items-center\">\n          <div className=\"date w-20 h-20 ui_themeColor\">\n            <SymbolToday />\n          </div>\n          <div className=\"content ml-8\">\n            <div className=\"h1\">每日歌曲推荐</div>\n            <div className=\"text-gray-400 tips\">\n              根据你的音乐口味生成, 每天6:00更新\n            </div>\n          </div>\n        </div>\n        <div className=\"actions flex mt-5\">\n          <GroupPlay playlist={dailySongs} />\n          &nbsp; &nbsp;\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center border px-3 h-8 rounded-full hover:bg-gray-100\"\n          >\n            <IconFolderPlus size={22} stroke={1} />\n            &nbsp; 收藏全部\n          </button>\n        </div>\n      </div>\n      <Content dailySongs={dailySongs} />\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport DailySong from \"./DailySong\";\nconst Router = () => {\n  return (\n    <Routes>\n      <Route index element={<DailySong />} />\n    </Routes>\n  );\n};\n\nexport default Router;\n"],"names":["Content","dailySongs","div","className","style","map","dailySong","index","MenuCreate","schema","type","item","key","name","id","tabIndex","classNames","Rank","Heart","Download","Name","Artists","artists","ar","Album","al","dayjs","dt","format","memo","data","useLoginStatus","useGetRecommendSongsQuery","isLoading","error","isFetching","isSuccess","isError","refetch","Loading","SymbolToday","GroupPlay","playlist","button","IconFolderPlus","size","stroke","Routes","Route","element","DailySong"],"sourceRoot":""}