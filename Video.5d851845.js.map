{"version":3,"file":"Video.5d851845.js","mappings":"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","sources":["webpack://wyy/./src/pages/Video/MVList/index.tsx","webpack://wyy/./src/pages/Video/VideoList/components/Select/Select.tsx","webpack://wyy/./src/pages/Video/VideoList/components/Select/index.ts","webpack://wyy/./src/pages/Video/VideoList/index.tsx","webpack://wyy/./src/pages/Video/index.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  memo,\n  useMemo,\n} from 'react';\nimport { useAppSelector, useAppDispatch } from '@/reducers/hooks';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport {\n  IconChevronRight,\n} from '@tabler/icons';\nimport DomGridVideo from '@/components/GridVideo';\nimport DomGridMVToplist from '@/components/GridMVToplist';\nimport DomLoading from '@/components/Loading';\nimport {\n  handleInit,\n  handleChangeFirstArea,\n  handleChangeTopArea,\n  MVListSelector\n} from '@/reducers/mvlist/slice';\n\nconst category = [\n  '内地',\n  '港台',\n  '欧美',\n  '日本',\n  '韩国',\n];\n\nexport default memo(() => {\n  const dispatch = useAppDispatch()\n  const {\n    firstArea,\n    topArea,\n    first,\n    hot,\n    wy,\n    top,\n    timestamp,\n  } = useAppSelector(MVListSelector);\n  const memoLoading = useMemo(() => Date.now() - timestamp > 3600000, [timestamp]);\n\n  useEffect(() => {\n    if (memoLoading) {\n      dispatch(handleInit({\n        firstArea,\n        topArea,\n      }));\n    }\n  }, [memoLoading]);\n\n  if (memoLoading) return <div className=\"w-full h-full flex-center\"><DomLoading /></div>;\n  return (\n    <div className=\"domVideoList_content px-8 overflow-auto max-h-full flex-auto\">\n      <div className=\"domMVList_sublist\">\n        <div className=\"domMVList_header mb-5 flex justify-between items-center\">\n          <Link\n            to={`/allmv?order=最新&area=${firstArea}`}\n            className=\"domMVList_subLink font-bold text-base flex items-center\"\n          >\n            最新MV\n            <IconChevronRight size={20} />\n          </Link>\n          <div className=\"recommend_nav flex divide-x space-x-1\">\n            {\n              category.map((item) => (\n                <div className=\"item\" key={item}>\n                  <button\n                    onClick={() => dispatch(handleChangeFirstArea(item))}\n                    type=\"button\"\n                    className={classNames('link rounded-full px-2.5', firstArea === item ? 'text-red-500 bg-red-50' : 'ui_text_black_hover')}\n                  >\n                    {item}\n                  </button>\n                </div>\n              ))\n            }\n          </div>\n        </div>\n        <DomGridVideo list={first} />\n      </div>\n      <div className=\"domMVList_sublist\">\n        <div className=\"domMVList_header mt-8 mb-5 flex justify-between items-center\">\n          <Link\n            to=\"/allmv?order=最热\"\n            className=\"domMVList_subLink font-bold text-base flex items-center\"\n          >\n            热播MV\n            <IconChevronRight size={20} />\n          </Link>\n        </div>\n        <DomGridVideo list={hot} />\n      </div>\n      <div className=\"domMVList_sublist\">\n        <div className=\"domMVList_header mt-8 mb-5 flex justify-between items-center\">\n          <Link\n            to=\"/allmv?type=网易出品&order=最新\"\n            className=\"domMVList_subLink font-bold text-base flex items-center\"\n          >\n            网易出品\n            <IconChevronRight size={20} />\n          </Link>\n        </div>\n        <DomGridVideo list={wy} />\n      </div>\n      <div className=\"domMVList_header mt-8 mb-5 flex justify-between items-center\">\n        <Link to=\"/toplist-mv/\" className=\"domMVList_subLink font-bold text-base flex items-center\">\n          MV排行榜\n          <IconChevronRight size={20} />\n        </Link>\n        <div className=\"recommend_nav flex divide-x space-x-1\">\n          {\n            category.map((item) => (\n              <div className=\"item\" key={item}>\n                <button\n                  onClick={() => dispatch(handleChangeTopArea(item))}\n                  type=\"button\"\n                  className={classNames('link rounded-full px-2.5', topArea === item ? 'text-red-500 bg-red-50' : 'ui_text_black_hover')}\n                >\n                  {item}\n                </button>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n      <DomGridMVToplist\n        list={top}\n        schema={[\n          ['评论', '播放'],\n          ['收藏', '分享', '下载MV', '复制链接'],\n        ]}\n      />\n    </div>\n  );\n});\n","import classNames from \"classnames\";\nimport {setVideoListId, VideoListSelector} from \"@/reducers/videolist/slice\";\nimport React, {memo, FC} from \"react\";\nimport {useAppDispatch, useAppSelector} from \"@/reducers/hooks\";\nimport './style.scss'\n\ninterface iProps {\n  id: number\n}\n\nconst Select: FC<iProps> = ({id}) => {\n  const dispatch = useAppDispatch()\n  const {groupList} = useAppSelector(VideoListSelector)\n  return (\n    <div className=\"group_select_box absolute top-100 p-5 bg-white overflow-auto shadow\">\n      <div className=\"border-b pb-2\">\n        <button\n          type=\"button\"\n          className={classNames('group_select_check text-center rounded-full h-8 flex-center hover:ui_themeColor', id === 0 ? 'text-red-500 bg-red-50' : '')}\n          onClick={() => dispatch(setVideoListId({id: 0}))}\n        >\n          全部视频\n        </button>\n      </div>\n      <div className=\"group_select_list grid grid-cols-6 gap-y-5 p-4\">\n        {groupList.map((item) => (\n          <button\n            type=\"button\"\n            className={classNames('group_select_check text-center rounded-full h-8 flex-center hover:ui_themeColor', item.id === id ? 'text-red-500 bg-red-50' : '')}\n            key={item.id}\n            onClick={() => dispatch(setVideoListId({id: item.id}))}\n          >\n            {item.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default memo(Select);\n","export {default } from './Select'\n","import React, {\n  memo,\n  useEffect, useState,\n  useRef,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport useInfinite from '@/hooks/useInfinite';\nimport DomGridVideo from '@/components/GridVideo';\nimport {\n  handleAddList,\n  handlePrevInit,\n  setVideoListId,\n  setVideoListInit,\n  Category,\n  VideoListSelector\n} from '@/reducers/videolist/slice';\nimport { useAppSelector, useAppDispatch } from '@/reducers/hooks';\nimport DomLoading from '@/components/Loading';\nimport Select from './components/Select'\n\nexport default memo(() => {\n  const dispatch = useAppDispatch()\n  const {\n    id,\n    initStatus,\n    groupList,\n    categoryList,\n    videoList,\n  } = useAppSelector(VideoListSelector);\n  const [groupListVisibility, setGroupListVisibility] = useState(false);\n  const currentNav = useMemo(() => groupList.find((group) => group.id === Number(id))?.name || '全部视频', [id]);\n\n  const domScroll = useRef<HTMLDivElement>(null);\n  const domObserver = useRef<HTMLDivElement>(null);\n\n  useInfinite(() => dispatch(handleAddList(id)), domScroll, domObserver);\n\n  useEffect(() => {\n    dispatch(handlePrevInit());\n    return () => {\n      dispatch(setVideoListInit())\n    }\n  }, []);\n\n  useEffect(() => {\n    dispatch(setVideoListInit())\n  }, [id]);\n\n  return (\n    <div className=\"domVideoList_content px-8 overflow-auto flex-auto\" ref={domScroll}>\n      <div className=\"video_sort_filter_bar flex items-center justify-between\">\n        <div className=\"group_select_wrap relative z-10\">\n          <button\n            type=\"button\"\n            className=\"group_select_button border rounded-full hover:bg-gray-100 text-sm\"\n            onClick={() => setGroupListVisibility(!groupListVisibility)}\n          >\n            {currentNav}\n            &gt;\n          </button>\n          {groupListVisibility\n            && <Select id={id} />}\n        </div>\n        <div className=\"recommend_nav divide-x flex\">\n          {categoryList.map((item: Category) => (\n            <div key={item.id}>\n              <button\n                type=\"button\"\n                className={classNames('recommend_nav_link rounded-full px-2 mx-1', id === item.id ? 'bg-red-50 text-red-500' : 'ui_text_black_hover')}\n                onClick={() => dispatch(setVideoListId({ id: item.id }))}\n              >\n                {item.name}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"my-4\">\n        <DomGridVideo\n          list={videoList}\n        />\n        <div ref={domObserver} className=\"flex-center\">\n          <DomLoading />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { memo } from 'react';\nimport {\n  NavLink, Switch, Redirect, Route,\n} from 'react-router-dom';\nimport VideoList from './VideoList';\nimport MVList from './MVList';\n\nconst navs = [\n  ['视频', '/video/videolist'],\n  ['MV', '/video/mvlist'],\n];\n\nexport default memo(() => (\n  <div className=\"domVideoList flex flex-col h-full\">\n    <div className=\"domVideoList_header ui_header text-base space-x-4\">\n      {\n        navs.map(([name, path]) => (\n          <NavLink\n            key={name}\n            className=\"domVideoList_link\"\n            activeClassName=\"text-xl ui_underline font-bold\"\n            to={path}\n          >\n            {name}\n          </NavLink>\n        ))\n      }\n    </div>\n    <Switch>\n      <Route path=\"/video/videolist\">\n        <VideoList />\n      </Route>\n      <Route path=\"/video/mvlist\">\n        <MVList />\n      </Route>\n      <Redirect to=\"/video/videolist\" />\n    </Switch>\n  </div>\n));\n"],"names":["category","memo","dispatch","useAppDispatch","useAppSelector","MVListSelector","firstArea","topArea","first","hot","wy","top","timestamp","memoLoading","useMemo","Date","now","useEffect","handleInit","className","Link","to","IconChevronRight","size","map","item","key","onClick","handleChangeFirstArea","type","list","handleChangeTopArea","schema","Select","id","groupList","VideoListSelector","setVideoListId","name","default","initStatus","categoryList","videoList","useState","groupListVisibility","setGroupListVisibility","currentNav","find","group","Number","domScroll","useRef","domObserver","handleAddList","handlePrevInit","setVideoListInit","ref","navs","path","NavLink","activeClassName","Switch","Route","Redirect"],"sourceRoot":""}