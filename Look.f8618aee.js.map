{"version":3,"file":"Look.f8618aee.js","mappings":"wPAgBA,SAAeA,EAAAA,EAAAA,OAAK,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eACMC,GADN,WACkBC,EAAAA,EAAAA,QAAO,OACnBC,GAAcD,EAAAA,EAAAA,QAAO,MAC3B,GAAwBF,EAAAA,EAAAA,UAAgB,IAAxC,eAGA,GAHA,WAGoDI,EAAAA,EAAAA,UAAS,QAAD,iBAAS,sGAC9CC,IAAAA,IAAU,8BAC5BC,MAAK,SAACC,GAAD,OAASA,EAAIC,QAF8C,uBAC5DA,EAD4D,EAC5DA,KAD4D,kBAG5DA,GAH4D,6CAA9DA,EAAP,EAAOA,KAAaC,GAApB,EAAaC,MAAb,EAAoBD,WAAWE,EAA/B,EAA+BA,UAM/B,OANA,EAA0CC,OAOxC,yBAAKC,UAAU,6CAA6CC,IAAKb,GAC/D,yBAAKY,UAAU,4BACb,0BAAMA,UAAU,YAAhB,UACA,0BAAMA,UAAU,6BAAhB,YACA,kBAAC,EAAAE,KAAD,CAAMC,GAAI,gBAAEC,EAAF,EAAEA,SAAF,gBAAmBA,EAAnB,QAAkCJ,UAAU,gDAAtD,QACA,uBAAGK,KAAK,2BAA2BL,UAAU,yBAA7C,SAEF,yBAAKA,UAAU,QACZJ,GAAa,yBAAKI,UAAS,qBAAuB,kBAACM,EAAA,EAAD,OAClDR,GAAa,kBAACS,EAAD,CAAUC,KAAMb,IAE9B,yBAAKM,IAAKX,SAMlB,IAAMiB,GAAWrB,EAAAA,EAAAA,OAAsB,gBAAEsB,EAAF,EAAEA,KAAF,OACrC,yBAAKR,UAAS,0BAEVQ,EAAKC,KAAI,+BAAEC,EAAF,KAAOC,EAAP,YACP,yBAAKD,IAAKA,GACR,kBAAC,EAAAR,KAAD,CAAMC,GAAI,gBAAEC,EAAF,EAAEA,SAAF,gBAAmBA,EAAnB,YAA+BM,KACvC,yBAAKV,UAAS,uBAA0BY,QAAO,OAAUC,IAAKF,EAAQG,OAAQC,IAAI,MAEpF,6BACE,kBAAC,EAAAb,KAAD,CAAMC,GAAI,gBAAEC,EAAF,EAAEA,SAAF,gBAAmBA,EAAnB,YAA+BM,KAAQC,EAAQK,QAE3D,6BAAK,kBAAC,EAAAd,KAAD,CAAMC,GAAE,KAAQQ,EAAQM","sources":["webpack://wyy/./src/pages/Look/Home/Home.tsx"],"sourcesContent":["import React, {useState, memo, useRef, useEffect} from 'react';\nimport useInfinite from '@/hooks/useInfinite';\nimport {Link} from 'react-router-dom'\nimport axios from 'axios'\nimport {useQuery} from \"react-query\";\nimport Loading from \"@/components/Loading\";\nimport Rea from 'react-error-boundary'\ntype iList = [string, iOptions][]\n\ninterface iOptions {\n  password: string,\n  title: string,\n  user: string,\n  banner: string\n}\n\nexport default memo(() => {\n  const [size, setSize] = useState(20);\n  const DomScroll = useRef(null);\n  const DomObserver = useRef(null);\n  const [list, setList] = useState<iList>([])\n  // useInfinite(() => { setSize((prev) => prev + 20); }, DomScroll, DomObserver);\n\n  const {data, error, isLoading, isSuccess, status} = useQuery('look', async () => {\n    const {data} = await axios.get('http://localhost:3333/list')\n      .then((res) => res.data)\n    return data\n  })\n\n  return (\n    <div className=\"domLook overflow-auto max-h-full flex-auto\" ref={DomScroll}>\n      <div className=\"domLook_header ui_header\">\n        <span className=\"title h1\">LOOK直播</span>\n        <span className=\"text-gray-400 slogan ml-2\">在这里，看见音乐</span>\n        <Link to={({pathname}) => `${pathname}/my`} className=\"ml-2 py-1 px-2 rounded bg-red-500 text-white\">我的直播</Link>\n        <a href=\"https://look.163.com/hot\" className=\"text-gray-400 ml-auto\">更多 &gt;</a>\n      </div>\n      <div className=\"px-8\">\n        {isLoading && <div className={`pt-48 flex-center`}><Loading/></div>}\n        {isSuccess && <LiveList list={data}/>}\n\n        <div ref={DomObserver} />\n      </div>\n    </div>\n  );\n});\n\nconst LiveList = memo<{ list: iList }>(({list}) => (\n  <div className={`grid grid-cols-3 gap-5`}>\n    {\n      list.map(([key, options]) => (\n        <div key={key}>\n          <Link to={({pathname}) => `${pathname}/${key}`}>\n            <img className={`ui_aspect-ratio-16/9`} loading={`lazy`} src={options.banner} alt=\"\"/>\n          </Link>\n          <div>\n            <Link to={({pathname}) => `${pathname}/${key}`}>{options.title}</Link>\n          </div>\n          <div><Link to={`/`}>{options.user}</Link></div>\n        </div>\n      ))\n    }\n  </div>\n))\n"],"names":["memo","useState","DomScroll","useRef","DomObserver","useQuery","axios","then","res","data","isLoading","error","isSuccess","status","className","ref","Link","to","pathname","href","Loading","LiveList","list","map","key","options","loading","src","banner","alt","title","user"],"sourceRoot":""}