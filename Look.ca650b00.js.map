{"version":3,"file":"Look.ca650b00.js","mappings":"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","sources":["webpack://wyy/./src/pages/Look/Look.tsx","webpack://wyy/./src/pages/Look/Live/socket.ts","webpack://wyy/./src/pages/Look/Live/Live.tsx","webpack://wyy/./src/pages/Look/Home.tsx"],"sourcesContent":["import React, {useState, memo, useRef} from 'react';\nimport DomLook from '@/components/AdLookRectangle';\nimport useInfinite from '@/hooks/useInfinite';\nimport {Link} from 'react-router-dom'\n// import './style.scss';\n\nexport default memo(() => {\n  const [size, setSize] = useState(20);\n  const DomScroll = useRef(null);\n  const DomObserver = useRef(null);\n  useInfinite(() => { setSize((prev) => prev + 20); }, DomScroll, DomObserver);\n  return (\n    <div className=\"domLook overflow-auto max-h-full flex-auto\" ref={DomScroll}>\n      <div className=\"domLook_header ui_header\">\n        <span className=\"title h1\">LOOK直播</span>\n        <span className=\"text-gray-400 slogan ml-2\">在这里，看见音乐</span>\n        <Link to={({pathname}) => `${pathname}/my`} className=\"ml-2 py-1 px-2 rounded bg-red-500 text-white\">我的直播</Link>\n        <a href=\"https://look.163.com/hot\" className=\"text-gray-400 ml-auto\">更多 &gt;</a>\n      </div>\n      <div className=\"px-8\">\n        <div>{}</div>\n        <div ref={DomObserver} />\n      </div>\n    </div>\n  );\n});\n","import io from 'socket.io-client'\n\nconst url = 'http://localhost:3333'\n\nconst socket = io(url, {\n  autoConnect: false\n})\n\nsocket.on('create-success', (data) => {\n  console.log(data)\n})\n\nsocket.on('join-success', (data) => {\n  console.log(data)\n})\n\nsocket.on('disconnect-success', (data) => {\n  console.log(data)\n})\n\nexport default socket\n","import React, {memo, MouseEventHandler, ReactNode, useRef} from 'react'\nimport {useAppDispatch, useAppSelector} from \"@/reducers/hooks\";\nimport {\n  liveSelector,\n  deskTopClose, deskTopOpen,\n  userClose, userOpen,\n  pushOpen, pushClose,\n} from \"@/reducers/live/slice\";\nimport classnames from 'classnames'\nimport socket from './socket'\nimport useLoginStatus, {handleLoginStatus} from \"@/hooks/useLoginStatus\";\n\ninterface iButtonProps {\n  onClick: MouseEventHandler<HTMLButtonElement>,\n  status: boolean,\n  children: ReactNode\n}\n\nconst Button = memo<iButtonProps>\n(({onClick, status, children}) => (\n  <button type={'button'}\n          className={classnames(`text-white rounded p-2`, status ? 'bg-red-500' : 'bg-blue-500')}\n          onClick={onClick}>{children}</button>\n))\n\n/*\n* TODO\n*  1.信令系统\n*  2.摄像头叠加桌面，如基本直播\n* */\nexport default memo(() => {\n  const dispatch = useAppDispatch()\n  const {status} = useAppSelector(liveSelector)\n\n  const RefDeskTop = useRef(null)\n  const RefDeskTopStream = useRef(null)\n  const RefUser = useRef(null)\n  const handleDeskTop: MouseEventHandler = () => {\n    if(!status.deskTop) handleDeskTopOpen()\n    else handleDeskTopClose()\n  }\n\n  const handleDeskTopOpen = () => {\n\n    let deskTopStream = null;\n    const mediaStreamConstraints = {\n      video: true,\n      audio: true,\n    };\n\n    function gotDeskTopMediaStream(mediaStream: MediaStream) {\n      RefDeskTop.current.srcObject = mediaStream;\n      // deskTopStream = mediaStream;\n      dispatch(deskTopOpen())\n    }\n\n    RefDeskTopStream.current = navigator.mediaDevices\n      .getDisplayMedia(mediaStreamConstraints)\n      .then(gotDeskTopMediaStream)\n      .catch((err) => console.log(err));\n  }\n\n  const handleDeskTopClose = () => {\n    if(RefDeskTop.current) {\n      const tracks = RefDeskTop.current.srcObject.getTracks()\n      tracks.forEach((track: MediaStreamTrack) => track.stop())\n      RefDeskTop.current.srcObject = null\n      dispatch(deskTopClose())\n    }\n  }\n\n  const handleUser: MouseEventHandler = () => {\n    if(!status.user) handleUserOpen()\n    else handleUserClose()\n  }\n\n  const handleUserOpen = () => {\n    dispatch(userOpen())\n    let userStream = null;\n    const mediaStreamConstraints = {\n      video: true,\n      audio: true,\n    };\n\n    function gotLocalMediaStream(mediaStream: MediaStream) {\n      if(RefUser.current) (RefUser.current as HTMLVideoElement).srcObject = mediaStream;\n\n      // userStream = mediaStream;\n    }\n\n    navigator.mediaDevices\n      .getUserMedia(mediaStreamConstraints)\n      .then(gotLocalMediaStream)\n      .catch((err) => console.log(err));\n  }\n\n  const handleUserClose = () => {\n    dispatch(userClose())\n  }\n\n  const handleSend: MouseEventHandler = () => {\n    if(!status.push) handlePushOpen()\n    else handlePushClose()\n  }\n\n  const handlePushOpen = async () => {\n    dispatch(pushOpen())\n    socket.connect()\n    socket.emit('create', {\n      uid: 110\n    })\n  }\n  const handlePushClose = () => {\n    dispatch(pushClose())\n    socket.disconnect()\n  }\n\n  return (\n    <div className={`w-full h-full p-8 overflow-auto`}>\n      <div className={`flex`}>\n        <Button onClick={handleDeskTop} status={status.deskTop}>桌面共享开关</Button>\n        <Button onClick={handleUser} status={status.user}>摄像头开关</Button>\n        <Button onClick={handleSend} status={status.push}>推送开关</Button>\n      </div>\n      <div className={`flex flex-col`}>\n        <div className={``}>\n          <video className={`w-full`} ref={RefDeskTop} autoPlay playsInline/>\n        </div>\n        <div className={''}>\n          <video className={`w-full`} ref={RefUser} autoPlay playsInline/>\n        </div>\n      </div>\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport {Switch, Route} from \"react-router-dom\";\nimport Look from './Look'\nimport Live from './Live'\n\nexport default memo(() => {\n  return (\n    <Switch>\n      <Route path={'/look'} exact component={Look}/>\n      <Route path={`/look/my`} component={Live}/>\n    </Switch>\n  )\n})\n"],"names":["memo","useState","setSize","DomScroll","useRef","DomObserver","useInfinite","prev","className","ref","Link","to","pathname","href","socket","io","autoConnect","on","data","console","log","Button","onClick","status","children","type","classnames","dispatch","useAppDispatch","useAppSelector","liveSelector","RefDeskTop","RefDeskTopStream","RefUser","handlePushOpen","pushOpen","uid","deskTop","current","srcObject","getTracks","forEach","track","stop","deskTopClose","navigator","mediaDevices","getDisplayMedia","video","audio","then","mediaStream","deskTopOpen","catch","err","user","userClose","userOpen","getUserMedia","push","pushClose","autoPlay","playsInline","Switch","Route","path","exact","component","Look","Live"],"sourceRoot":""}