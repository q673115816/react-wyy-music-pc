{"version":3,"file":"Video.c765525e.js","mappings":"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","sources":["webpack://wyy/./src/pages/Video/VideoList/components/Select/Select.tsx","webpack://wyy/./src/pages/Video/VideoList/index.tsx","webpack://wyy/./src/pages/Video/MVList/index.tsx","webpack://wyy/./src/pages/Video/index.tsx"],"sourcesContent":["import classNames from \"classnames\";\nimport {setVideoListId, VideoListSelector} from \"@/reducers/videolist/slice\";\nimport React, {memo, FC} from \"react\";\nimport {useAppDispatch, useAppSelector} from \"@/reducers/hooks\";\nimport './style.scss'\n\ninterface iProps {\n  id: number\n}\n\nconst Select: FC<iProps> = ({id}) => {\n  const dispatch = useAppDispatch()\n  const {groupList} = useAppSelector(VideoListSelector)\n  return (\n    <div className=\"group_select_box absolute top-100 p-5 bg-white overflow-auto shadow\">\n      <div className=\"border-b pb-2\">\n        <button\n          type=\"button\"\n          className={classNames('group_select_check text-center rounded-full h-8 flex-center hover:ui_themeColor', id === 0 ? 'text-red-500 bg-red-50' : '')}\n          onClick={() => dispatch(setVideoListId({id: 0}))}\n        >\n          全部视频\n        </button>\n      </div>\n      <div className=\"group_select_list grid grid-cols-6 gap-y-5 p-4\">\n        {groupList.map((item) => (\n          <button\n            type=\"button\"\n            className={classNames('group_select_check text-center rounded-full h-8 flex-center hover:ui_themeColor', item.id === id ? 'text-red-500 bg-red-50' : '')}\n            key={item.id}\n            onClick={() => dispatch(setVideoListId({id: item.id}))}\n          >\n            {item.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default memo(Select);\n","import React, {\n  memo,\n  useEffect, useState,\n  useRef,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport useInfinite from '@/hooks/useInfinite';\nimport DomGridVideo from '@/components/GridVideo';\nimport {\n  handleAddList,\n  handlePrevInit,\n  setVideoListId,\n  setVideoListInit,\n  Category,\n  VideoListSelector\n} from '@/reducers/videolist/slice';\nimport { useAppSelector, useAppDispatch } from '@/reducers/hooks';\nimport DomLoading from '@/components/Loading';\nimport Select from './components/Select'\n\nexport default memo(() => {\n  const dispatch = useAppDispatch()\n  const {\n    id,\n    initStatus,\n    groupList,\n    categoryList,\n    videoList,\n  } = useAppSelector(VideoListSelector);\n  const [groupListVisibility, setGroupListVisibility] = useState(false);\n  const currentNav = useMemo(() => groupList.find((group) => group.id === Number(id))?.name || '全部视频', [id]);\n\n  const domScroll = useRef<HTMLDivElement>(null);\n  const domObserver = useRef<HTMLDivElement>(null);\n\n  useInfinite(() => dispatch(handleAddList(id)), domScroll, domObserver);\n\n  useEffect(() => {\n    dispatch(handlePrevInit());\n    return () => {\n      dispatch(setVideoListInit())\n    }\n  }, []);\n\n  useEffect(() => {\n    dispatch(setVideoListInit())\n  }, [id]);\n\n  return (\n    <div className=\"domVideoList_content px-8 overflow-auto flex-auto\" ref={domScroll}>\n      <div className=\"video_sort_filter_bar flex items-center justify-between\">\n        <div className=\"group_select_wrap relative z-10\">\n          <button\n            type=\"button\"\n            className=\"group_select_button border rounded-full hover:bg-gray-100 text-sm\"\n            onClick={() => setGroupListVisibility(!groupListVisibility)}\n          >\n            {currentNav}\n            &gt;\n          </button>\n          {groupListVisibility\n            && <Select id={id} />}\n        </div>\n        <div className=\"recommend_nav divide-x flex\">\n          {categoryList.map((item: Category) => (\n            <div key={item.id}>\n              <button\n                type=\"button\"\n                className={classNames('recommend_nav_link rounded-full px-2 mx-1', id === item.id ? 'bg-red-50 text-red-500' : 'ui_text_black_hover')}\n                onClick={() => dispatch(setVideoListId({ id: item.id }))}\n              >\n                {item.name}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"my-4\">\n        <DomGridVideo\n          list={videoList}\n        />\n        <div ref={domObserver} className=\"flex-center\">\n          <DomLoading />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, {\n  useEffect,\n  memo,\n  useMemo,\n} from 'react';\nimport { useAppSelector, useAppDispatch } from '@/reducers/hooks';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport {\n  IconChevronRight,\n} from '@tabler/icons';\nimport DomGridVideo from '@/components/GridVideo';\nimport DomGridMVToplist from '@/components/GridMVToplist';\nimport DomLoading from '@/components/Loading';\nimport {\n  handleInit,\n  handleChangeFirstArea,\n  handleChangeTopArea,\n  MVListSelector\n} from '@/reducers/mvlist/slice';\n\nconst category = [\n  '内地',\n  '港台',\n  '欧美',\n  '日本',\n  '韩国',\n];\n\nexport default memo(() => {\n  const dispatch = useAppDispatch()\n  const {\n    firstArea,\n    topArea,\n    first,\n    hot,\n    wy,\n    top,\n    timestamp,\n  } = useAppSelector(MVListSelector);\n  const memoLoading = useMemo(() => Date.now() - timestamp > 3600000, [timestamp]);\n\n  useEffect(() => {\n    if (memoLoading) {\n      dispatch(handleInit({\n        firstArea,\n        topArea,\n      }));\n    }\n  }, [memoLoading]);\n\n  if (memoLoading) return <div className=\"w-full h-full flex-center\"><DomLoading /></div>;\n  return (\n    <div className=\"domVideoList_content px-8 overflow-auto max-h-full flex-auto\">\n      <div className=\"domMVList_sublist\">\n        <div className=\"domMVList_header mb-5 flex justify-between items-center\">\n          <Link\n            to={`/allmv?order=最新&area=${firstArea}`}\n            className=\"domMVList_subLink font-bold text-base flex items-center\"\n          >\n            最新MV\n            <IconChevronRight size={20} />\n          </Link>\n          <div className=\"recommend_nav flex divide-x space-x-1\">\n            {\n              category.map((item) => (\n                <div className=\"item\" key={item}>\n                  <button\n                    onClick={() => dispatch(handleChangeFirstArea(item))}\n                    type=\"button\"\n                    className={classNames('link rounded-full px-2.5', firstArea === item ? 'text-red-500 bg-red-50' : 'ui_text_black_hover')}\n                  >\n                    {item}\n                  </button>\n                </div>\n              ))\n            }\n          </div>\n        </div>\n        <DomGridVideo list={first} />\n      </div>\n      <div className=\"domMVList_sublist\">\n        <div className=\"domMVList_header mt-8 mb-5 flex justify-between items-center\">\n          <Link\n            to=\"/allmv?order=最热\"\n            className=\"domMVList_subLink font-bold text-base flex items-center\"\n          >\n            热播MV\n            <IconChevronRight size={20} />\n          </Link>\n        </div>\n        <DomGridVideo list={hot} />\n      </div>\n      <div className=\"domMVList_sublist\">\n        <div className=\"domMVList_header mt-8 mb-5 flex justify-between items-center\">\n          <Link\n            to=\"/allmv?type=网易出品&order=最新\"\n            className=\"domMVList_subLink font-bold text-base flex items-center\"\n          >\n            网易出品\n            <IconChevronRight size={20} />\n          </Link>\n        </div>\n        <DomGridVideo list={wy} />\n      </div>\n      <div className=\"domMVList_header mt-8 mb-5 flex justify-between items-center\">\n        <Link to=\"/toplist-mv/\" className=\"domMVList_subLink font-bold text-base flex items-center\">\n          MV排行榜\n          <IconChevronRight size={20} />\n        </Link>\n        <div className=\"recommend_nav flex divide-x space-x-1\">\n          {\n            category.map((item) => (\n              <div className=\"item\" key={item}>\n                <button\n                  onClick={() => dispatch(handleChangeTopArea(item))}\n                  type=\"button\"\n                  className={classNames('link rounded-full px-2.5', topArea === item ? 'text-red-500 bg-red-50' : 'ui_text_black_hover')}\n                >\n                  {item}\n                </button>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n      <DomGridMVToplist\n        list={top}\n        schema={[\n          ['评论', '播放'],\n          ['收藏', '分享', '下载MV', '复制链接'],\n        ]}\n      />\n    </div>\n  );\n});\n","import React, { memo } from 'react';\nimport {\n  NavLink, Switch, Redirect, Route,\n} from 'react-router-dom';\nimport VideoList from './VideoList';\nimport MVList from './MVList';\n\nconst navs = [\n  ['视频', '/video/videolist'],\n  ['MV', '/video/mvlist'],\n];\n\nexport default memo(() => (\n  <div className=\"domVideoList flex flex-col h-full\">\n    <div className=\"domVideoList_header ui_header text-base space-x-4\">\n      {\n        navs.map(([name, path]) => (\n          <NavLink\n            key={name}\n            className=\"domVideoList_link\"\n            activeClassName=\"text-xl ui_underline font-bold\"\n            to={path}\n          >\n            {name}\n          </NavLink>\n        ))\n      }\n    </div>\n    <Switch>\n      <Route path=\"/video/videolist\">\n        <VideoList />\n      </Route>\n      <Route path=\"/video/mvlist\">\n        <MVList />\n      </Route>\n      <Redirect to=\"/video/videolist\" />\n    </Switch>\n  </div>\n));\n"],"names":["Select","id","dispatch","useAppDispatch","groupList","useAppSelector","VideoListSelector","className","type","classNames","onClick","setVideoListId","map","item","key","name","memo","initStatus","categoryList","videoList","useState","groupListVisibility","setGroupListVisibility","currentNav","useMemo","find","group","Number","domScroll","useRef","domObserver","useInfinite","handleAddList","useEffect","handlePrevInit","setVideoListInit","ref","list","category","MVListSelector","firstArea","topArea","first","hot","wy","top","timestamp","memoLoading","Date","now","handleInit","Link","to","IconChevronRight","size","handleChangeFirstArea","handleChangeTopArea","schema","navs","path","NavLink","activeClassName","Switch","Route","VideoList","MVList","Redirect"],"sourceRoot":""}