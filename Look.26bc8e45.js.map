{"version":3,"file":"Look.26bc8e45.js","mappings":"2KAMA,SAAeA,EAAAA,EAAAA,OAAK,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAaC,GAAb,WACMC,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAcD,EAAAA,EAAAA,QAAO,MAE3B,OADAE,EAAAA,EAAAA,IAAY,WAAQJ,GAAQ,SAACK,GAAD,OAAUA,EAAO,QAAQJ,EAAWE,GAE9D,yBAAKG,UAAU,6CAA6CC,IAAKN,GAC/D,yBAAKK,UAAU,4BACb,0BAAMA,UAAU,YAAhB,UACA,0BAAMA,UAAU,6BAAhB,YACA,kBAAC,EAAAE,KAAD,CAAMC,GAAI,gBAAEC,EAAF,EAAEA,SAAF,gBAAmBA,EAAnB,QAAkCJ,UAAU,gDAAtD,QACA,uBAAGK,KAAK,2BAA2BL,UAAU,yBAA7C,SAEF,yBAAKA,UAAU,QACb,8BACA,yBAAKC,IAAKJ,S,mDCZlB,SAAeL,EAAAA,EAAAA,OAAK,WAClB,IAAMc,GAAWC,EAAAA,EAAAA,KACVC,GAAUC,EAAAA,EAAAA,GAAeC,EAAAA,cAAzBF,OAEDG,GAAaf,EAAAA,EAAAA,QAAO,MACpBgB,GAAmBhB,EAAAA,EAAAA,QAAO,MAC1BiB,GAAUjB,EAAAA,EAAAA,QAAO,MA6DvB,OACE,yBAAKI,UAAS,mCACZ,yBAAKA,UAAS,QACZ,4BAAQc,KAAM,SAAUd,UAAWe,GAAAA,CAAW,yBAA0BP,EAAOQ,QAAU,aAAe,eAAgBC,QA/DxG,WAChBT,EAAOQ,SAyBXV,GAASY,EAAAA,EAAAA,iBACMP,EAAWQ,QAAQC,UAAUC,YACrCC,SAAQ,SAACC,GAAD,OAA6BA,EAAMC,UAClDb,EAAWQ,QAAQC,UAAY,MAV/BR,EAAiBO,QAAUM,UAAUC,aAClCC,gBAZ4B,CAC7BC,OAAO,EACPC,OAAO,IAWNC,MARH,SAA+BC,GAC7BpB,EAAWQ,QAAQC,UAAYW,EAE/BzB,GAAS0B,EAAAA,EAAAA,mBAMRC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAyC1B,UACA,4BAAQpB,KAAM,SAAUd,UAAWe,GAAAA,CAAW,yBAA0BP,EAAO6B,KAAO,aAAe,eAAgBpB,QAhCxG,WACbT,EAAO6B,KAwBX/B,GAASgC,EAAAA,EAAAA,eAnBThC,GAASiC,EAAAA,EAAAA,aAYTd,UAAUC,aACPc,aAX4B,CAC7BZ,OAAO,EACPC,OAAO,IAUNC,MAPH,SAA6BC,GAC3BlB,EAAQM,QAAQC,UAAYW,KAO3BE,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,SAW1B,UAEF,yBAAKlC,UAAS,iBACZ,yBAAKA,UAAS,IACZ,2BAAOA,UAAS,SAAYC,IAAKU,EAAY8B,UAAQ,EAACC,aAAW,KAEnE,yBAAK1C,UAAW,IACd,2BAAOA,UAAS,SAAYC,IAAKY,EAAS4B,UAAQ,EAACC,aAAW,UClFxE,GAAelD,EAAAA,EAAAA,OAAK,WAClB,OACE,kBAAC,EAAAmD,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAM,QAASC,OAAK,EAACC,UAAWC,IACvC,kBAAC,EAAAJ,MAAD,CAAOC,KAAI,WAAcE,UAAWE","sources":["webpack://wyy/./src/pages/Look/Look.tsx","webpack://wyy/./src/pages/Look/Live.tsx","webpack://wyy/./src/pages/Look/Home.tsx"],"sourcesContent":["import React, {useState, memo, useRef} from 'react';\nimport DomLook from '@/components/AdLookRectangle';\nimport useInfinite from '@/hooks/useInfinite';\nimport {Link} from 'react-router-dom'\n// import './style.scss';\n\nexport default memo(() => {\n  const [size, setSize] = useState(20);\n  const DomScroll = useRef(null);\n  const DomObserver = useRef(null);\n  useInfinite(() => { setSize((prev) => prev + 20); }, DomScroll, DomObserver);\n  return (\n    <div className=\"domLook overflow-auto max-h-full flex-auto\" ref={DomScroll}>\n      <div className=\"domLook_header ui_header\">\n        <span className=\"title h1\">LOOK直播</span>\n        <span className=\"text-gray-400 slogan ml-2\">在这里，看见音乐</span>\n        <Link to={({pathname}) => `${pathname}/my`} className=\"ml-2 py-1 px-2 rounded bg-red-500 text-white\">我的直播</Link>\n        <a href=\"https://look.163.com/hot\" className=\"text-gray-400 ml-auto\">更多 &gt;</a>\n      </div>\n      <div className=\"px-8\">\n        <div>{}</div>\n        <div ref={DomObserver} />\n      </div>\n    </div>\n  );\n});\n","import React, {memo, useRef} from 'react'\nimport {useAppDispatch, useAppSelector} from \"@/reducers/hooks\";\nimport {deskTopClose, deskTopOpen, liveSelector, userClose, userOpen} from \"@/reducers/live/slice\";\nimport classnames from 'classnames'\n/*\n* TODO\n*  1.信令系统\n*  2.摄像头叠加桌面，如基本直播\n* */\nexport default memo(() => {\n  const dispatch = useAppDispatch()\n  const {status} = useAppSelector(liveSelector)\n\n  const RefDeskTop = useRef(null)\n  const RefDeskTopStream = useRef(null)\n  const RefUser = useRef(null)\n  const handleDeskTop = () => {\n    if(!status.deskTop) handleDeskTopOpen()\n    else handleDeskTopClose()\n  }\n\n  const handleDeskTopOpen = () => {\n\n    let deskTopStream = null;\n    const mediaStreamConstraints = {\n      video: true,\n      audio: true,\n    };\n\n    function gotDeskTopMediaStream(mediaStream: MediaStream) {\n      RefDeskTop.current.srcObject = mediaStream;\n      // deskTopStream = mediaStream;\n      dispatch(deskTopOpen())\n    }\n\n    RefDeskTopStream.current = navigator.mediaDevices\n      .getDisplayMedia(mediaStreamConstraints)\n      .then(gotDeskTopMediaStream)\n      .catch((err) => console.log(err));\n  }\n\n  const handleDeskTopClose = () => {\n    dispatch(deskTopClose())\n    const tracks = RefDeskTop.current.srcObject.getTracks()\n    tracks.forEach((track: MediaStreamTrack) => track.stop())\n    RefDeskTop.current.srcObject = null\n  }\n\n  const handleUser = () => {\n    if(!status.user) handleUserOpen()\n    else handleUserClose()\n  }\n\n  const handleUserOpen = () => {\n    dispatch(userOpen())\n    let userStream = null;\n    const mediaStreamConstraints = {\n      video: true,\n      audio: true,\n    };\n\n    function gotLocalMediaStream(mediaStream: MediaStream) {\n      RefUser.current.srcObject = mediaStream;\n      // userStream = mediaStream;\n    }\n\n    navigator.mediaDevices\n      .getUserMedia(mediaStreamConstraints)\n      .then(gotLocalMediaStream)\n      .catch((err) => console.log(err));\n  }\n\n  const handleUserClose = () => {\n    dispatch(userClose())\n  }\n\n  return (\n    <div className={`w-full h-full p-8 overflow-auto`}>\n      <div className={`flex`}>\n        <button type={'button'} className={classnames(`text-white rounded p-2`, status.deskTop ? 'bg-red-500' : 'bg-blue-500')} onClick={handleDeskTop}>桌面共享开关</button>\n        <button type={'button'} className={classnames(`text-white rounded p-2`, status.user ? 'bg-red-500' : 'bg-blue-500')} onClick={handleUser}>摄像头开关</button>\n      </div>\n      <div className={`flex flex-col`}>\n        <div className={``}>\n          <video className={`w-full`} ref={RefDeskTop} autoPlay playsInline/>\n        </div>\n        <div className={''}>\n          <video className={`w-full`} ref={RefUser} autoPlay playsInline/>\n        </div>\n      </div>\n    </div>\n  )\n})\n","import React, { memo } from 'react'\nimport {Switch, Route} from \"react-router-dom\";\nimport Look from './Look'\nimport Live from './Live'\n\nexport default memo(() => {\n  return (\n    <Switch>\n      <Route path={'/look'} exact component={Look}/>\n      <Route path={`/look/my`} component={Live}/>\n    </Switch>\n  )\n})\n"],"names":["memo","useState","setSize","DomScroll","useRef","DomObserver","useInfinite","prev","className","ref","Link","to","pathname","href","dispatch","useAppDispatch","status","useAppSelector","liveSelector","RefDeskTop","RefDeskTopStream","RefUser","type","classnames","deskTop","onClick","deskTopClose","current","srcObject","getTracks","forEach","track","stop","navigator","mediaDevices","getDisplayMedia","video","audio","then","mediaStream","deskTopOpen","catch","err","console","log","user","userClose","userOpen","getUserMedia","autoPlay","playsInline","Switch","Route","path","exact","component","Look","Live"],"sourceRoot":""}